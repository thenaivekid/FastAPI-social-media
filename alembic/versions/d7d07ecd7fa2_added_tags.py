"""added tags

Revision ID: d7d07ecd7fa2
Revises: 
Create Date: 2024-11-23 04:39:34.136942

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = "d7d07ecd7fa2"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "tag",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=False),
        sa.Column(
            "created_at", sa.DateTime(), server_default=sa.text("CURRENT_TIMESTAMP")
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    # Add unique index on tag name to prevent duplicates
    op.create_index("ix_tag_name", "tag", ["name"], unique=True)

    # Create post_tags association table
    op.create_table(
        "post_tags",
        sa.Column("post_id", sa.Integer(), nullable=False),
        sa.Column("tag_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["post_id"], ["post.id"], ondelete="CASCADE", name="fk_post_tags_post_id"
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"], ["tag.id"], ondelete="CASCADE", name="fk_post_tags_tag_id"
        ),
    )
    # Add index on post_id and tag_id for faster lookups
    op.create_index("ix_post_tags_post_id", "post_tags", ["post_id"])
    op.create_index("ix_post_tags_tag_id", "post_tags", ["tag_id"])
    # Add unique constraint to prevent duplicate tag assignments
    op.create_unique_constraint("uq_post_tags", "post_tags", ["post_id", "tag_id"])
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint("uq_post_tags", "post_tags", type_="unique")
    op.drop_index("ix_post_tags_tag_id", "post_tags")
    op.drop_index("ix_post_tags_post_id", "post_tags")
    op.drop_table("post_tags")
    op.drop_index("ix_tag_name", "tag")
    op.drop_table("tag")
